<!DOCTYPE html>
<html>
  <head>
      <title>Bobcat Sprinklers test</title>
  </head>

  <body onload="start()">
    Zone <select class="form-control" id="zOne">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
      </select>
    Start Hour <select class="form-control" id="startHour">
      <option value="00">12:00</option>
      <option value="01">1:00</option>
      <option value="02">2:00</option>
      <option value="03">3:00</option>
      <option value="04">4:00</option>
      <option value="05">5:00</option>
      <option value="06">6:00</option>
      <option value="07">7:00</option>
      <option value="08">8:00</option>
      <option value="09">9:00</option>
      <option value="10">10:00</option>
      <option value="11">11:00</option>
    </select>
    <select class="form-control" id="amPm1">
      <option value="00">AM</option>
      <option value="12">PM</option>
    </select>
    Start Minute <select class="form-control" id="startMinute">
      <option value="00">00</option>
      <option value="15">15</option>
      <option value="30">30</option>
      <option value="45">45</option>
    </select>

    Stop Hour <select class="form-control" id="stopHour">
      <option value="00">12:00</option>
      <option value="01">1:00</option>
      <option value="02">2:00</option>
      <option value="03">3:00</option>
      <option value="04">4:00</option>
      <option value="05">5:00</option>
      <option value="06">6:00</option>
      <option value="07">7:00</option>
      <option value="08">8:00</option>
      <option value="09">9:00</option>
      <option value="10">10:00</option>
      <option value="11">11:00</option>
    </select>
    <select class="form-control" id="amPm2">
      <option value="0">AM</option>
      <option value="12">PM</option>
    </select>
        Stop Minute <select class="form-control" id="stopMinute">
      <option value="00">00</option>
      <option value="15">15</option>
      <option value="30">30</option>
      <option value="45">45</option>
    </select>

<br>

<form name="daysList">
    <input type="checkbox" name="choice" value="1" onchange="checkTotal()" id="day1"/>Sunday
    <input type="checkbox" name="choice" value="2" onchange="checkTotal()" id="day2"/>Monday
    <input type="checkbox" name="choice" value="4" onchange="checkTotal()" id="day3"/>Tuesday
    <input type="checkbox" name="choice" value="8" onchange="checkTotal()" id="day4"/>Wednesday
    <input type="checkbox" name="choice" value="16" onchange="checkTotal()" id="day5"/>Thursday
    <input type="checkbox" name="choice" value="32" onchange="checkTotal()" id="day6"/>Friday
    <input type="checkbox" name="choice" value="64" onchange="checkTotal()" id="day7"/>Saturday
    <input type="hidden" size="3" name="total" id="days" value="0">
  </form>
    <button type="button" onclick="sendValues()">Send values</button>


<br>
<span id="zone1"></span><br>
<span id="zone2"></span><br>
<span id="zone3"></span><br>
<span id="zone4"></span><br>
<span id="zone5"></span><br>
<span id="stats"></span><br>
    <span id="tstamp"></span>

    <br>
    <button onclick="getinfo()">get info</button>
    <br>please only use this when needed
    <br><br>
    <button id = "1"  type="submit" onclick="manual(this)">Zone 1 on</button>
    <button id = "2"  type="button" onclick="manual(this)">Zone 1 off</button><br>
    <button id = "3"  type="button" onclick="manual(this)">Zone 2 on</button>
    <button id = "4"  type="button" onclick="manual(this)">Zone 2 off</button><br>
    <button id = "5"  type="button" onclick="manual(this)">Zone 3 on</button>
    <button id = "6"  type="button" onclick="manual(this)">Zone 3 off</button><br>
    <button id = "7"  type="button" onclick="manual(this)">Zone 4 on</button>
    <button id = "8"  type="button" onclick="manual(this)">Zone 4 off</button><br>
    <button id = "9"  type="button" onclick="manual(this)">Zone 5 on</button>
    <button id = "10"  type="button" onclick="manual(this)">Zone 5 off</button><br>

    <div style="text-align: center;"><iframe style="border: 1px solid rgb(204, 204, 204);" src="https://api.thingspeak.com/channels/106090/charts/1?width=800&amp;height=300&amp;average=60&amp;results=2000&amp;days=14;dynamic=true&amp;yaxis=Water%20Lvl%20cm&amp;xaxis=Date%2FTime&amp;title=Water%20Lvl%20cm" height="300" width="800" ></iframe></div><br>
    <div style="text-align: center;"><iframe style="border: 1px solid rgb(204, 204, 204);" src="https://api.thingspeak.com/channels/106090/charts/2?width=800&amp;height=300&amp;average=60&amp;results=2000&amp;days=14;dynamic=true&amp;yaxis=Water%20Lvl%20Ltrs&amp;xaxis=Date%2FTime&amp;title=Water%20Lvl%20Ltrs" height="300" width="800" ></iframe></div><br>
    <div style="text-align: center;"><iframe style="border: 1px solid rgb(204, 204, 204);" src="https://api.thingspeak.com/channels/106090/charts/3?width=800&amp;height=300&amp;average=60&amp;results=2000&amp;days=14;dynamic=true&amp;yaxis=Temp&amp;xaxis=Date%2FTime&amp;title=Temprature" height="300" width="800" ></iframe></div><br>
    <div style="text-align: center;"><iframe style="border: 1px solid rgb(204, 204, 204);" src="https://api.thingspeak.com/channels/106090/charts/4?width=800&amp;height=300&amp;average=60&amp;results=2000&amp;days=14;dynamic=true&amp;yaxis=Humidity&amp;xaxis=Date%2FTime&amp;title=Humidity" height="300" width="800" ></iframe></div><br>

    <script src="http://cdn.jsdelivr.net/particle-api-js/5/particle.min.js"> </script>
    <script type="text/javascript">
var accessToken ="";
var deviceID ="";
var accessData;
    function readTextFile(file, callback) {
      var rawFile = new XMLHttpRequest();
      rawFile.overrideMimeType("application/json");
      rawFile.open("GET", file, false);
      rawFile.onreadystatechange = function() {
          if (rawFile.readyState === 4 && rawFile.status == "200") {
              callback(rawFile.responseText);
          }
      }
      rawFile.send(null);
  }

  //usage:
  readTextFile("/config.json", function(text){
      accessData = JSON.parse(text);
      accessToken = String(accessData.token);
      deviceID = String(accessData.device);
      //console.log(accessToken);
});

    var particle;
    var token;
    particle = new Particle();

  function sendValues(){
    var zOne;
    var startHour;
    var startMinute;
    var stopHour;
    var stopMinute;
    var amPm1;
    var combinedTime;
    var amPm2;
    var days;
    var timeCalc;

    checkTotal();
    amPm1 = document.getElementById('amPm1');
    amPm2 = document.getElementById('amPm2');
    zOne = document.getElementById('zOne');
    days = document.getElementById('days');
    startHour = document.getElementById('startHour');
    startMinute = document.getElementById('startMinute');
    stopHour = document.getElementById('stopHour');
    stopMinute = document.getElementById('stopMinute');
    timeCalc =  parseInt(startHour.value,10);
    amPm1 = parseInt(amPm1.value,10);
    amPm1 = timeCalc + amPm1 +'';
    timeCalc = 0;
    timeCalc =  parseInt(stopHour.value,10);
    amPm2 = parseInt(amPm2.value,10);
    amPm2 = timeCalc + amPm2 +'';
    combinedTime = '1' + '~' + amPm1 + '~' + startMinute.value + '~' + amPm2 + '~' + stopMinute.value + '~' + days.value + '~' + zOne.value;
    console.log(combinedTime);


    var fnPr = particle.callFunction({ deviceId: accessData.device, name: 'parse', argument: combinedTime, auth: accessData.token });

    fnPr.then(
      function(data) {
        console.log('Function called succesfully:', data);
      }, function(err) {
        console.log('An error occurred:', err);
      });

  /*  startHour.value = '';
    startMinute.value = '';
    stopHour.value = '';
    stopMinute.value = '';
    zOne.value = '';
    days.value = '';
*/
  }
  function manual(button) {
var manualCotrol;

switch (button.id) {
        case '1':
            manualControl = '2~1~1~1~1~1~1';
            break;
        case '2':
            manualControl = '2~1~0~1~1~1~1';
            break;
        case '3':
            manualControl = '2~2~1~1~1~1~1';
            break;
        case '4':
            manualControl = '2~2~0~1~1~1~1';
            break;
        case '5':
            manualControl = '2~3~1~1~1~1~1';
            break;
        case '6':
            manualControl = '2~3~0~1~1~1~1';
            break;
        case '7':
            manualControl = '2~4~1~1~1~1~1';
            break;
        case '8':
            manualControl = '2~4~0~1~1~1~1';
            break;
        case '9':
            manualControl = '2~5~1~1~1~1~1';
            break;
        case '10':
            manualControl = '2~5~0~1~1~1~1';
            break;
        default:
            return false;
    }

      console.log(manualControl);

    var fnPr = particle.callFunction({ deviceId: deviceID, name: 'parse', argument: manualControl, auth: accessToken });

    fnPr.then(
      function(data) {
        console.log('Function called succesfully:', data);
      }, function(err) {
        console.log('An error occurred:', err);
      });

  }
  	function checkTotal() {
  		document.daysList.total.value = '';
  		var sum = 0;
  		for (i=0;i<document.daysList.choice.length;i++) {
  		  if (document.daysList.choice[i].checked) {
  		  	sum = sum + parseInt(document.daysList.choice[i].value);
  		  }
  		}
  		document.daysList.total.value = sum;
  	}


  function start() {

      document.getElementById("zone1").innerHTML = "Waiting for data...";

      var eventSource = new EventSource("https://api.particle.io/v1/devices/" + deviceID + "/events/?access_token=" + accessToken);

      eventSource.addEventListener('open', function(e) {
          console.log("Opened!"); },false);

      eventSource.addEventListener('error', function(e) {
          console.log("Errored!"); },false);

      eventSource.addEventListener('Zone1', function(e) {
          var tsSpan   = document.getElementById("tstamp");
          var rawData = JSON.parse(e.data);
          var parsedData = JSON.parse(rawData.data);
          var tempSpan = document.getElementById("zone1");
          tempSpan.innerHTML = "zone 1 state " + parsedData.sta + " on time "+ parsedData.sth + ":"+ parsedData.stm + " off time " + parsedData.sph + ":" + parsedData.spm +" days " + parsedData.day;
          tempSpan.style.fontSize = "16px";
          tsSpan.innerHTML = "At timestamp " + rawData.published_at;
          tsSpan.style.fontSize = "9px";
          },false);
      eventSource.addEventListener('Zone2', function(e) {
        var rawData = JSON.parse(e.data);
        var parsedData = JSON.parse(rawData.data);
        var tempSpan = document.getElementById("zone2");
        tempSpan.innerHTML = "zone 2 state " + parsedData.sta + " on time "+ parsedData.sth + ":"+ parsedData.stm + " off time " + parsedData.sph + ":" + parsedData.spm +" days " + parsedData.day;
        tempSpan.style.fontSize = "16px";
        },false);
      eventSource.addEventListener('Zone3', function(e) {
        var rawData = JSON.parse(e.data);
        var parsedData = JSON.parse(rawData.data);
        var tempSpan = document.getElementById("zone3");
        tempSpan.innerHTML = "zone 3 state " + parsedData.sta + " on time "+ parsedData.sth + ":"+ parsedData.stm + " off time " + parsedData.sph + ":" + parsedData.spm +" days " + parsedData.day;
        tempSpan.style.fontSize = "16px";
        },false);
      eventSource.addEventListener('Zone4', function(e) {
        var rawData = JSON.parse(e.data);
        var parsedData = JSON.parse(rawData.data);
        var tempSpan = document.getElementById("zone4");
        tempSpan.innerHTML = "zone 4 state " + parsedData.sta + " on time "+ parsedData.sth + ":"+ parsedData.stm + " off time " + parsedData.sph + ":" + parsedData.spm +" days " + parsedData.day;
        tempSpan.style.fontSize = "16px";
        },false);
      eventSource.addEventListener('Zone5', function(e) {
          var rawData = JSON.parse(e.data);
          var parsedData = JSON.parse(rawData.data);
          var tempSpan = document.getElementById("zone5");
          tempSpan.innerHTML = "zone 5 state " + parsedData.sta + " on time "+ parsedData.sth + ":"+ parsedData.stm + " off time " + parsedData.sph + ":" + parsedData.spm +" days " + parsedData.day;
          tempSpan.style.fontSize = "16px";
          },false);
      eventSource.addEventListener('Stats', function(e) {
          var rawData = JSON.parse(e.data);
          var parsedData = JSON.parse(rawData.data);
          var tempSpan = document.getElementById("stats");
          tempSpan.innerHTML = "Stats <br>" + parsedData.Tmp + "c Temp <br>" + parsedData.Hum + "% Relitive Humidity <br>" + parsedData.Lvl + " Lvl " + parsedData.Ltrs + " Liters in tank";
          tempSpan.style.fontSize = "16px";
          } ,false);
  }
function getinfo(){

  var fnPr = particle.callFunction({ deviceId: accessData.device, name: 'parse', argument: '3~1~1~1~1~1~1' , auth: accessData.token });

  fnPr.then(
    function(data) {
      console.log('Function called succesfully:', data);
    }, function(err) {
      console.log('An error occurred:', err);
    });
}

</script>
  </body>
</html>
